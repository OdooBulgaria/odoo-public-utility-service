-
  Prepair next period if december.
-
 !python {model: account.period}: |
    from datetime import date
    period_pool = self.pool.get('account.period')
    def gen_period(self, cr, uid, y):
        from datetime import date
        from openerp.tools import DEFAULT_SERVER_DATE_FORMAT as DATE_FORMAT
        period_pool = self.pool.get('account.period')
        fiscalyear_pool = self.pool.get('account.fiscalyear')
        first_day_of_year = date(y, 1, 1).strftime(DATE_FORMAT)
        last_day_of_year =  date(y, 12, 31).strftime(DATE_FORMAT)
        fy_id = fiscalyear_pool.create(cr, uid, {
                'name': 'Test fiscal year',
                'code': '001',
                'date_start': first_day_of_year,
                'date_stop': last_day_of_year})
        fiscalyear_pool.create_period3(cr, uid, fy_id)
        return period_pool.find(cr, uid)[0]

    period_id = period_pool.find(cr, uid)[0]
    if not period_id:
        period_id = gen_period(self, cr, uid, date.today().year)
    period_obj = period_pool.browse(cr, uid, period_id)
    period_next_id = period_pool.next(cr, uid, period_obj, 1)
    if not period_next_id:
        period_id = gen_period(self, cr, uid, date.today().year+1)

-
 Generate Contract with utility service
-
 !record {model: account.analytic.account, id: utility_contract_1}:
        name: Utility contract
        use_utilities: True
        partner_id: base.res_partner_1
        partner_shipping_id: base.res_partner_1
        invoice_journal_id: account.sales_journal
        utility_product_line_ids:
                - product_id: product.product_product_1
                  state: installed
                  product_uom: product.product_uom_unit
                - product_id: product.product_product_2
                  state: installed
                  product_uom: product.product_uom_unit
                - product_id: product.product_product_3
                  state: installed
                  product_uom: product.product_uom_unit

-
 Test generate_invoice function.
-
 !python {model: account.analytic.account}: |
         self.pus_generate_invoice(cr, uid, [ref('utility_contract_1')])

-
 Generate Contract with utility service and automatic invoice validation
-
 !record {model: account.analytic.account, id: utility_contract_2}:
        name: Utility contract
        use_utilities: True
        partner_id: base.res_partner_1
        partner_shipping_id: base.res_partner_1
        invoice_journal_id: account.sales_journal
        utility_product_line_ids:
                - product_id: product.product_product_1
                  state: installed
                  product_uom: product.product_uom_unit
                - product_id: product.product_product_2
                  state: installed
                  product_uom: product.product_uom_unit
                - product_id: product.product_product_3
                  state: installed
                  product_uom: product.product_uom_unit
        invoices_automatic_validation: True
        invoices_no_change_validation: True

-
 Test generate_invoice function.
-
 !python {model: account.analytic.account}: |
         period_obj = self.pool.get('account.period')
         period_id = period_obj.find(cr, uid)[0]
         period = period_obj.browse(cr, uid, period_id)
         self.pus_generate_invoice(cr, uid, [ref('utility_contract_2')], period_id=period.id)
         self.pus_generate_invoice(cr, uid, [ref('utility_contract_2')], period_id=period_obj.next(cr, uid, period, 1))
         invoices = self.browse(cr, uid, ref('utility_contract_2')).invoice_ids
         assert len(invoices) == 2, 'Error! Must have 2 invoices! Have: %i' % len(invoices)
         assert all(inv.state=='draft' for inv in invoices) , 'Error! None invoices must be validated'
         
-
 Hand made invoice validation.
-
 !python {model: account.analytic.account}: |
         from openerp import netsvc
         wf_service = netsvc.LocalService("workflow")
         invoices = self.browse(cr, uid, ref('utility_contract_2')).invoice_ids
         for inv in invoices:
                 wf_service.trg_validate(uid, 'account.invoice', inv.id, 'invoice_open', cr)

-
 Check invoice validation.
-
 !python {model: account.analytic.account}: |
         invoices = self.browse(cr, uid, ref('utility_contract_2')).invoice_ids
         assert all(inv.state=='open' for inv in invoices) , 'Error! All invoices must be validated'

-
 Test generate_invoice function but now must validate.
-
 !python {model: account.analytic.account}: |
         period_obj = self.pool.get('account.period')
         period_id = period_obj.find(cr, uid)[0]
         period = period_obj.browse(cr, uid, period_id)
         self.pus_generate_invoice(cr, uid, [ref('utility_contract_2')], period_id=period_obj.next(cr, uid, period, 2))
         invoices = self.browse(cr, uid, ref('utility_contract_2')).invoice_ids
         assert len(invoices) == 3, 'Error! Must have 3 invoices! Have: %i' % len(invoices)
         assert all(inv.state=='open' for inv in invoices) , 'Error! All invoices must be validated'
          
